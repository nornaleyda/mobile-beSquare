import 'dart:async';
import 'dart:convert';
import 'dart:io';

const String url =
    'wss://ws.binaryws.com/websockets/v3?app_id=31063&l=EN&brand=deriv';

WebSocket? socket;

Future<void> main() async {
  // Connect to websocket.
  printYellow('Connecting to websocket...');

  socket = await connectWebsocket();
  // Listen for messages.
  socket?.listen((event) {
    handleMessage(event);

    handleInput();
  });
  printGreen('Connected to websocket.');

  handleInput();
}

void handleInput() {
  printYellow('Enter command:');

  final String command = stdin.readLineSync()!;

  switch (command) {
    case 'ping':
      sendPing();
      break;

    case 'symbol':
      sendActiveSymbol();
      break;

    default:
      printRed('Unknown command.');
      handleInput();
  }
}

void sendActiveSymbol() {
  final map = {"active_symbols": "brief", "product_type": "basic"};

  final encoded = jsonEncode(map);

  socket?.add(encoded);
}

Future<WebSocket> connectWebsocket() async => WebSocket.connect(url);

void handleMessage(String message) {
  // print(message);

  final decoded = jsonDecode(message);

  final object = Autogenerated.fromJson(decoded);

  print(object.activeSymbols);

  //  Map<String, dynamic> data = jsonDecode(message);
  //handlePing(message);
}

class PingRequest {
  PingRequest({required this.ping});

  final int ping;

  String toJson() {
    final Map<String, int> dict = {
      'ping': ping,
    };

    return jsonEncode(dict);
  }
}

class PingResponse {
  PingResponse({required this.messageType, required this.pingResult});

  final String messageType;
  final String pingResult;

  static PingResponse fromJson(String serverResponse) {
    final Map<String, dynamic> decodedResponse = jsonDecode(serverResponse);

    return PingResponse(
      messageType: decodedResponse['msg_type'],
      pingResult: decodedResponse['ping'],
    );
  }
}

class ActiveSymbolRequest {
  // symbol request class
  ActiveSymbolRequest({required this.activeSymbol, required this.productType});

  final String activeSymbol;
  final String productType;

  String toJson() {
    final Map<String, String> symbol = {
      'active_symbols': activeSymbol,
      'product_type': productType,
    };

    return jsonEncode(symbol);
  }
}

class ActiveSymbolResponse {
  // symbol response class
  ActiveSymbolResponse(this.activeSymbol, this.productType, this.symbol);

  final String activeSymbol;
  final String productType;
  final String symbol;

  static ActiveSymbolResponse fromJson(String symbolResponse) {
    final Map<String, dynamic> decodedResponse = jsonDecode(symbolResponse);

    return ActiveSymbolResponse(
      decodedResponse['display_name'],
      decodedResponse['market'],
      decodedResponse['symbol'],
    );
  }
}

// void activeSymbol(){
//   // function
// }

void activeSymbol(String symbolResponse) {
  final response = ActiveSymbolResponse.fromJson(symbolResponse);
  if (response.activeSymbol == 'symbol') {
    printGreen(response.activeSymbol);
  }
}

void sendPing() {
  final PingRequest request = PingRequest(ping: 1);

  socket!.add(request.toJson());
}

void handlePing(String serverResponse) {
  final response = PingResponse.fromJson(serverResponse);
  if (response.messageType == 'ping') {
    printGreen(response.pingResult);
  }
}

void printGreen(String text) {
  print('\x1B[32m$text\x1B[0m');
}

void printRed(String text) {
  print('\x1B[31m$text\x1B[0m');
}

void printYellow(String text) {
  print('\x1B[33m$text\x1B[0m');
}

class Autogenerated {
  List<ActiveSymbols>? activeSymbols;
  EchoReq? echoReq;
  String? msgType;
  int? reqId;

  Autogenerated({this.activeSymbols, this.echoReq, this.msgType, this.reqId});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
        activeSymbols:
            json['active_symbols'].map<ActiveSymbols>((item) => ActiveSymbols.fromJson(item)).toList());
  }
  //   if (json['active_symbols'] != null) {

  //   }
  //   echoReq = json['echo_req'] != null
  //       ? new EchoReq.fromJson(json['echo_req'])
  //       : null;
  //   msgType = json['msg_type'];
  //   reqId = json['req_id'];
  // }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.activeSymbols != null) {
      data['active_symbols'] =
          this.activeSymbols!.map((v) => v.toJson()).toList();
    }
    if (this.echoReq != null) {
      data['echo_req'] = this.echoReq!.toJson();
    }
    data['msg_type'] = this.msgType;
    data['req_id'] = this.reqId;
    return data;
  }
}

class ActiveSymbols {
  String? displayName;
  String? market;
  String? symbol;

  ActiveSymbols(
      {
      this.displayName,
      this.market,
      this.symbol,
});

  ActiveSymbols.fromJson(Map<String, dynamic> json) {
    displayName = json['display_name'];
    market = json['market'];
    symbol = json['symbol'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['display_name'] = this.displayName;
    data['market'] = this.market;
    data['symbol'] = this.symbol;
    return data;
  }

  @override
  String toString() {
    // TODO: implement toString
    return '$displayName';
  }
}

class EchoReq {
  String? activeSymbols;
  String? productType;
  int? reqId;

  EchoReq({this.activeSymbols, this.productType, this.reqId});

  EchoReq.fromJson(Map<String, dynamic> json) {
    activeSymbols = json['active_symbols'];
    productType = json['product_type'];
    reqId = json['req_id'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['active_symbols'] = this.activeSymbols;
    data['product_type'] = this.productType;
    data['req_id'] = this.reqId;
    return data;
  }
}
